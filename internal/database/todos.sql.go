// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todos.sql

package database

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos ("text") VALUES($1) RETURNING id, text
`

func (q *Queries) CreateTodo(ctx context.Context, text string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, text)
	var i Todo
	err := row.Scan(&i.ID, &i.Text)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :one
DELETE FROM todos WHERE id=$1 RETURNING id, text
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, deleteTodo, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Text)
	return i, err
}

const fetchTodo = `-- name: FetchTodo :one
SELECT id, text FROM todos WHERE id=$1
`

func (q *Queries) FetchTodo(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, fetchTodo, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Text)
	return i, err
}

const fetchTodos = `-- name: FetchTodos :many
SELECT id, text FROM todos
`

func (q *Queries) FetchTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, fetchTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos SET text=COALESCE($2, text) WHERE id=$1 RETURNING id, text
`

type UpdateTodoParams struct {
	ID   int32  `json:"id"`
	Text string `json:"text"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.ID, arg.Text)
	var i Todo
	err := row.Scan(&i.ID, &i.Text)
	return i, err
}
